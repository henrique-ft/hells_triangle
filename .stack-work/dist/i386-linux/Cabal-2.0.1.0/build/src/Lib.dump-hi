
==================== FINAL INTERFACE ====================
2018-01-05 15:26:18.242715 UTC

interface HellsTriangle-0.1.0.0-GbjVw98q5r971eEsSTAqHz:Lib 8022
  interface hash: 7d09c081a606611ef621da08dd42e692
  ABI hash: 89fda30c33977acb5a888eb5c348e0b3
  export-list hash: a08676b4a93c92dd944b9844d085272a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ef1ceba328a85a54c0429da8819d93a4
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.findMaximumTotal
  Lib.getUserInput
  Lib.getValuesThatCanBeSummedAndSum
  Lib.mapWithIteration
  Lib.mapWithIterationRecursion
  Lib.returnValueByIndexOrReturnZero
  Lib.startProgram
  Lib.sumHellsTriangleFromBottom
module dependencies:
package dependencies: base-4.10.1.0* ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:Data.Foldable 796fd450160844ab46e32625a804e1c9
import  -/  base-4.10.1.0:Data.List 2038250c88d5f985ccc71d16d015020d
import  -/  base-4.10.1.0:Data.Maybe 2fddaaee7be4435d5c5e7751d42a2081
import  -/  base-4.10.1.0:GHC.Base 5c0eab85c0ebd88dbbbe72dc80f7f3af
import  -/  base-4.10.1.0:GHC.List 5c705dbd01764848127bd668a8a169bd
import  -/  base-4.10.1.0:GHC.Num f6684974fc1b3413b605f4049dcf6ea1
import  -/  base-4.10.1.0:GHC.Show a1b65afbc622ad1d15f8960edac30bb0
import  -/  base-4.10.1.0:Prelude 0dcaa0418f2712f52b487daaa51abb55
import  -/  base-4.10.1.0:System.IO b75b38804e6a7cd17dbbfdbf1b13216b
import  -/  base-4.10.1.0:Text.Read 8d59b3bd4686b4233b81f786c6eb18a3
import  -/  ghc-prim-0.5.1.1:GHC.Classes d94dd6d973520df041bdb09fe97ebe64
import  -/  ghc-prim-0.5.1.1:GHC.Types f1fd43a652e51838d52b5b2302a0fd42
692aa2e05edca6c3d0e48a061ad48810
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule3 Lib.$trModule1) -}
683cb2594acc45b918755b588e9c69d5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$trModule2) -}
3fc8fd9bb0695c2b8544433aaa5aee44
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Lib"#) -}
852799b8ed7827e7ec49bad5f13c3f95
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$trModule4) -}
c32fb6b4c9e3e42b3a83ca839a21fd49
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("HellsTriangle-0.1.0.0-GbjVw98q5r971eEsSTAqHz"#) -}
c090ab9b85f9d1243cddf3f46a1620b0
  $wgetValuesThatCanBeSummedAndSum ::
    [GHC.Types.Int] -> GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 3, Strictness: <S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (w :: [GHC.Types.Int])
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#) ->
                 case Lib.$wreturnValueByIndexOrReturnZero
                        ww
                        w of wild { GHC.Types.I# x1 ->
                 case Lib.$wreturnValueByIndexOrReturnZero
                        (GHC.Prim.+# ww 1#)
                        w of wild1 { GHC.Types.I# y1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# x1 y1) of wild2 {
                   GHC.Types.False -> GHC.Prim.+# ww1 x1
                   GHC.Types.True -> GHC.Prim.+# ww1 y1 } } }) -}
70c9f2d94427a8d76417700743da3269
  $wmapWithIterationRecursion ::
    (GHC.Types.Int -> a -> b) -> [a] -> [b] -> GHC.Prim.Int# -> [b]
  {- Arity: 4, Strictness: <L,C(C1(U))><S,U><L,U><S,U>,
     Inline: [0] -}
f2d6a60fa7fd357f7b58fc1aeaf0486d
  $wreturnValueByIndexOrReturnZero ::
    GHC.Prim.Int# -> [GHC.Types.Int] -> GHC.Types.Int
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: [GHC.Types.Int]) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Int w 0# of ww2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww2) of wild {
                   GHC.Types.False -> Lib.getValuesThatCanBeSummedAndSum1
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 0#) of wild1 {
                        GHC.Types.False -> Lib.getValuesThatCanBeSummedAndSum1
                        GHC.Types.True -> GHC.List.$w!! @ GHC.Types.Int w ww } } }) -}
80b165c6aee3c84a4b65df68ce702567
  type HellsTriangle = [[GHC.Types.Int]]
93e8a88f805726fd55d0e055ad24968a
  findMaximumTotal :: Lib.HellsTriangle -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (hellsTriangle :: Lib.HellsTriangle) ->
                 Lib.findMaximumTotal_go
                   (GHC.List.reverse1
                      @ [GHC.Types.Int]
                      hellsTriangle
                      (GHC.Types.[] @ [GHC.Types.Int]))
                   (GHC.Types.[] @ GHC.Types.Int)) -}
a52477e096721ba71e2c953884ca3ae6
  findMaximumTotal_go ::
    [[GHC.Types.Int]] -> [GHC.Types.Int] -> GHC.Types.Int
  {- Arity: 2, Strictness: <S,1*U><L,U> -}
4748dba4423cd1d610bd93ac5a97ded7
  getUserInput :: GHC.Types.IO Lib.HellsTriangle
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.getUserInput1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <Lib.HellsTriangle>_R)) -}
f3eedbc5c373bf5a19039153371c6253
  getUserInput1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Lib.HellsTriangle #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    case Text.Read.readEither8
                           @ Lib.HellsTriangle
                           (Text.ParserCombinators.ReadP.run
                              @ Lib.HellsTriangle
                              Lib.getUserInput4
                              ipv1) of wild {
                      [] -> Lib.getUserInput3
                      : x ds
                      -> case ds of wild1 {
                           [] -> x : ipv2 ipv3 -> Lib.getUserInput2 } } #) }) -}
66f0c4459d4846cdbed3fbcf8596791b
  getUserInput2 :: Lib.HellsTriangle
  {- Strictness: x -}
c18f9c8c401c3c39a83aa899763790f0
  getUserInput3 :: Lib.HellsTriangle
  {- Strictness: x -}
a3167a7b525f49e89f385e0fb550fee9
  getUserInput4 :: Text.ParserCombinators.ReadP.P Lib.HellsTriangle
  {- Unfolding: ((GHC.Read.$fRead[]_$s$creadListPrec
                    `cast`
                  (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                       <Lib.HellsTriangle>_R)
                    Text.ParserCombinators.ReadPrec.minPrec)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0] <Lib.HellsTriangle>_R)
                   @ Lib.HellsTriangle
                   (Text.Read.readEither7 @ Lib.HellsTriangle)) -}
17ac9fbbaf2b9cc147d33757fce83191
  getValuesThatCanBeSummedAndSum ::
    [GHC.Types.Int]
    -> [GHC.Types.Int]
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
  {- Arity: 4, Strictness: <S,U><L,A><S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: [GHC.Types.Int])
                   (w1 :: [GHC.Types.Int])
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Types.Int) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 case w3 of ww2 { GHC.Types.I# ww3 ->
                 case Lib.$wgetValuesThatCanBeSummedAndSum
                        w
                        ww1
                        ww3 of ww4 { DEFAULT ->
                 GHC.Types.I# ww4 } } }) -}
e4fe92ce49a532dc6d29c9d821a3fdd2
  getValuesThatCanBeSummedAndSum1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
9bd10a9637ed1ffa757cb47d0792b1f0
  mapWithIteration :: (GHC.Types.Int -> a -> b) -> [a] -> [b]
  {- Arity: 2, Strictness: <L,C(C1(U))><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (f :: GHC.Types.Int -> a -> b) (list :: [a]) ->
                 Lib.mapWithIterationRecursion
                   @ a
                   @ b
                   f
                   list
                   (GHC.Types.[] @ b)
                   Lib.getValuesThatCanBeSummedAndSum1) -}
1dc55bc6d652c86034db77eb197d6a53
  mapWithIterationRecursion ::
    (GHC.Types.Int -> a -> b) -> [a] -> [b] -> GHC.Types.Int -> [b]
  {- Arity: 4, Strictness: <L,C(C1(U))><S,U><L,U><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Types.Int -> a -> b)
                   (w1 :: [a])
                   (w2 :: [b])
                   (w3 :: GHC.Types.Int) ->
                 case w3 of ww { GHC.Types.I# ww1 ->
                 Lib.$wmapWithIterationRecursion @ a @ b w w1 w2 ww1 }) -}
e9a04d2088dd7f4cbde4d814193403a4
  returnValueByIndexOrReturnZero ::
    GHC.Types.Int -> [GHC.Types.Int] -> GHC.Types.Int
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: [GHC.Types.Int]) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Lib.$wreturnValueByIndexOrReturnZero ww1 w1 }) -}
7f16ba885520664cd86abed34af68246
  startProgram :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.startProgram1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
b2a1ed14fd019481f02148dc004a1ad3
  startProgram1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Lib.startProgram8
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.Types.[] @ GHC.Types.Char)
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Lib.startProgram6
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Lib.startProgram4
                        GHC.Types.True
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.Types.[] @ GHC.Types.Char)
                        GHC.Types.True
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case Lib.getUserInput1 ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.Types.[] @ GHC.Types.Char)
                        GHC.Types.True
                        ipv10 of ds7 { (#,#) ipv12 ipv13 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Lib.startProgram2
                        GHC.Types.True
                        ipv12 of ds8 { (#,#) ipv14 ipv15 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (case Lib.findMaximumTotal_go
                                (GHC.List.reverse1
                                   @ [GHC.Types.Int]
                                   ipv11
                                   (GHC.Types.[] @ [GHC.Types.Int]))
                                (GHC.Types.[] @ GHC.Types.Int) of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                0#
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        GHC.Types.True
                        ipv14 of ds9 { (#,#) ipv16 ipv17 ->
                 (# ipv16, GHC.Tuple.() #) } } } } } } } } }) -}
293c06604bc58ab7126597dc1ec7c840
  startProgram2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Lib.startProgram3) -}
860abe025b267bde120c3f3d4accb4e7
  startProgram3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Result:"#) -}
76f030fa3bb86ceca0335716a7010895
  startProgram4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Lib.startProgram5) -}
d5570c24c6128f044056d5911af8e33f
  startProgram5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Example: [[1],[1,2],[1,2,3]]"#) -}
e4d1b07783db4d3686f3b0721ff9ddad
  startProgram6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Lib.startProgram7) -}
7b9cdc8e52118f987ada8cd735e38127
  startProgram7 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Send a triangle in a list and i'll give you the maximum total. "#) -}
cd9738f49e413ff9c7ced852bb29800d
  startProgram8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Lib.startProgram9) -}
6232fa067d4c2688d81249e3ad6f5cbb
  startProgram9 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("-------------- Welcome to HellsTriangle Machine --------------"#) -}
8fa7c02cdd6a9abf9f878419ead3b913
  sumHellsTriangleFromBottom ::
    [GHC.Types.Int] -> [GHC.Types.Int] -> [GHC.Types.Int]
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (oldList :: [GHC.Types.Int]) (actualList :: [GHC.Types.Int]) ->
                 Lib.mapWithIterationRecursion
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   (Lib.getValuesThatCanBeSummedAndSum oldList actualList)
                   actualList
                   (GHC.Types.[] @ GHC.Types.Int)
                   Lib.getValuesThatCanBeSummedAndSum1) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

